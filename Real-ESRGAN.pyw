import tkinter as tk
import os
from tkinter import ttk
from tkinterdnd2 import TkinterDnD, DND_FILES
from tkinter import filedialog
from PIL import Image
import torch
import numpy as np
from realesrgan import RealESRGANer
from basicsr.archs.rrdbnet_arch import RRDBNet

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global
image_to_process = None
device = 'cuda' if torch.cuda.is_available() else 'cpu'

def load_model():
    """‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Real-ESRGAN"""
    try:
        model_path = 'weights/RealESRGAN_x4plus.pth'
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå weights ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        os.makedirs('weights', exist_ok=True)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not os.path.exists(model_path):
            result_label.config(text="‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Å‡πà‡∏≠‡∏ô")
            return None

        # ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (RRDBNet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö x4plus)
        model = RRDBNet(num_in_ch=3, num_out_ch=3, num_feat=64, num_block=23, num_grow_ch=32, scale=4)
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
        loadnet = torch.load(model_path)
        if 'params' in loadnet:
            model.load_state_dict(loadnet['params'], strict=True)
        elif 'params_ema' in loadnet:
            model.load_state_dict(loadnet['params_ema'], strict=True)
        else:
            model.load_state_dict(loadnet, strict=True)
        
        model.eval()
        model = model.to(device)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á upsampler ‡πÇ‡∏î‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î tile ‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        upsampler = RealESRGANer(
            scale=4,
            model_path=model_path,
            model=model,
            device=device,
            tile=400,  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î tile size ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
            tile_pad=20,
            pre_pad=0
        )
        
        result_label.config(text="‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        return upsampler
    except Exception as e:
        result_label.config(text=f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•: {str(e)}")
        return None

def enhance_image():
    try:
        global image_to_process
        if not image_to_process:
            result_label.config(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô")
            return

        # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
        upsampler = load_model()
        if upsampler is None:
            return

        # ‡πÄ‡∏õ‡∏¥‡∏î‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î
        img = Image.open(image_to_process).convert('RGB')
        width, height = img.size
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ
        max_size = 1024
        if width > max_size or height > max_size:
            result_label.config(text="‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...")
            root.update()
            img.thumbnail((max_size, max_size), Image.LANCZOS)
        
        result_label.config(text="‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏†‡∏≤‡∏û...")
        root.update()
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô numpy array
        img_array = np.array(img)
        
        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û - ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå tile ‡πÑ‡∏õ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        output, _ = upsampler.enhance(
            img_array, 
            outscale=4  # ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏â‡∏û‡∏≤‡∏∞ outscale
        )
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô PIL Image
        output_img = Image.fromarray(output)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        base_name = os.path.splitext(os.path.basename(image_to_process))[0]
        output_dir = os.path.join(os.path.dirname(image_to_process), 'enhanced_results')
        os.makedirs(output_dir, exist_ok=True)
        output_path = os.path.join(output_dir, f"{base_name}_enhanced.png")
        output_img.save(output_path)
        
        result_label.config(text=f"‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!\n‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà:\n{output_path}")
        confirm_button.config(state=tk.DISABLED)
        cancel_button.config(state=tk.DISABLED)
        
    except Exception as e:
        result_label.config(text=f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

def on_drop(event):
    global image_to_process
    # ‡∏•‡∏ö‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö‡∏õ‡∏µ‡∏Å‡∏Å‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏≤‡∏Å‡∏°‡∏µ
    file_path = event.data.strip('{}')
    if os.path.isfile(file_path) and file_path.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.tif', '.tiff')):
        image_to_process = file_path
        result_label.config(text=f"üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {os.path.basename(image_to_process)}")
        confirm_button.config(state=tk.NORMAL)
        cancel_button.config(state=tk.NORMAL)
    else:
        result_label.config(text="‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (PNG, JPG, JPEG, BMP, TIFF)")

def choose_file():
    global image_to_process
    filepath = filedialog.askopenfilename(
        title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û",
        filetypes=[("‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û", "*.png;*.jpg;*.jpeg;*.bmp;*.tif;*.tiff")]
    )
    if filepath:
        image_to_process = filepath
        result_label.config(text=f"üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {os.path.basename(image_to_process)}")
        confirm_button.config(state=tk.NORMAL)
        cancel_button.config(state=tk.NORMAL)

def confirm_action():
    enhance_image()

def cancel_action():
    global image_to_process
    image_to_process = None
    result_label.config(text="‚ùå ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å!")
    confirm_button.config(state=tk.DISABLED)
    cancel_button.config(state=tk.DISABLED)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GUI
root = TkinterDnD.Tk()
root.title("‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ AI")
root.geometry("500x650")
root.resizable(False, False)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πÑ‡∏ï‡∏•‡πå
style = ttk.Style()
style.theme_use('clam')
style.configure('TButton', font=('Helvetica', 12), borderwidth=1, background="#4CAF50", foreground="white")
style.configure('TLabel', background="#f5f5f5", font=('Helvetica', 12), foreground="#333333")
style.configure('TLabelFrame', background="#f5f5f5", font=('Helvetica', 12), foreground="#333333")
style.configure('TFrame', background="#f5f5f5")

# ‡πÄ‡∏ü‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å
main_frame = ttk.Frame(root, padding=20)
main_frame.pack(fill=tk.BOTH, expand=True)

# ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß
header = ttk.Label(
    main_frame, 
    text="‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ AI", 
    font=('Helvetica', 18, 'bold'), 
    foreground="#4CAF50", 
    background="#f5f5f5"
)
header.pack(pady=(0, 20))

# ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
description = ttk.Label(
    main_frame,
    text="‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏î‡πâ‡∏ß‡∏¢ AI\n‡∏•‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
    font=('Helvetica', 12),
    justify=tk.CENTER,
    background="#f5f5f5"
)
description.pack(pady=(0, 30))

# ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á
drop_frame = ttk.LabelFrame(
    main_frame, 
    text=" ‡∏•‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ", 
    padding=20,
    relief=tk.GROOVE,
    borderwidth=2,
)
drop_frame.pack(fill=tk.X, pady=(0, 20))

drop_label = ttk.Label(
    drop_frame, 
    text="üìÅ ‡∏•‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà", 
    font=('Helvetica', 12),
    justify=tk.CENTER,
)
drop_label.pack()

# ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
choose_button = ttk.Button(
    drop_frame,
    text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û",
    command=choose_file,
    style='TButton'
)
choose_button.pack(pady=10)

# ‡∏õ‡πâ‡∏≤‡∏¢‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
result_label = ttk.Label(
    main_frame,
    text="",
    font=('Helvetica', 11),
    justify=tk.CENTER,
    wraplength=450,
    background="#f5f5f5"
)
result_label.pack(pady=20)

# ‡πÄ‡∏ü‡∏£‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
button_frame = ttk.Frame(main_frame)
button_frame.pack()

confirm_button = ttk.Button(
    button_frame,
    text="‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏†‡∏≤‡∏û",
    command=confirm_action,
    state=tk.DISABLED,
    style='TButton'
)
confirm_button.pack(side=tk.LEFT, padx=10)

cancel_button = ttk.Button(
    button_frame,
    text="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    command=cancel_action,
    state=tk.DISABLED,
    style='TButton'
)
cancel_button.pack(side=tk.LEFT)

# ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢
footer_text = f"‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Python ‡πÅ‡∏•‡∏∞ Real-ESRGAN\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô: {'GPU' if device == 'cuda' else 'CPU'}"
if device == 'cuda':
    footer_text += f"\nGPU: {torch.cuda.get_device_name(0)}"
footer_text += "\n‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å"

footer = ttk.Label(
    main_frame,
    text=footer_text,
    font=('Helvetica', 9),
    foreground='gray',
    background="#f5f5f5"
)
footer.pack(pady=(20, 0))

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á
root.drop_target_register(DND_FILES)
root.dnd_bind('<<Drop>>', on_drop)

root.mainloop()
